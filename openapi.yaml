openapi: 3.0.3
info:
  title: IVA Content API
  description: |
    The IVA content API is designed to allow the assignment of content to clients, recording analytics events and generating a report PDF for an assignment.
  contact:
    email: declan.cook@moneyalive.co.uk
  version: 0.4.0
tags:
  - name: Content
    description: Assignable content
  - name: Assignment
    description: Assign content to a client
  - name: Integration
    description: Webhook handlers
  - name: Analytics
    description: Record analytics events
  - name: Client
    description: Client assigned content

paths:
  /app/installed:
    post:
      tags:
        - Integration
      summary: AppInstalled webhook handler
      description: To be registered as a [AppInstalled](https://developer.gb.intelliflo.net/apis/events#appinstalled) webhook for the intelliflo apps
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ok"

  /content:
    get:
      tags:
        - Content
      summary: Get all content
      description: Get all available content, when a tenant ID is provided only content available to that tenant's installed app will be returned
      operationId: getContent
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: Number of items per page (max 100)
          required: false
          schema:
            type: integer
            example: 25
        - name: tenantId
          in: query
          description: Filter by tenant ID
          required: false
          schema:
            type: string
            example: 1234
        - name: search
          in: query
          description: Search by title
          required: false
          schema:
            type: string
            example: "Final"
        - name: tag
          in: query
          description: Filter by tag
          required: false
          schema:
            type: string
            example: "risk"

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Content'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error message"
                  errors:
                    type: array
                    items: 
                      type: object
                      properties:
                        field: 
                          type: string
                          example: "page"
                        message:
                          type: string
                          example: "Field must be an integer"
  /content/{id}:
    get:
      tags:
        - Content
      summary: Get content by ID
      description: Get content by ID
      operationId: getContentById
      parameters:
        - name: id
          in: path
          description: ID of content to return
          required: true
          schema:
            type: string
            example: final-salary
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
  /content/{id}/player:
    get:
      tags:
        - Content
      summary: Get player configuration for content
      description: Get player configuration for content, this will always return the latest player configuration for previewing the content. The config property will vary depending on the content type, see the Schema section for examples
      parameters:
        - name: id
          in: path
          description: ID of content to return
          required: true
          schema:
            type: string
            example: final-salary
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  assignmentId:
                    type: string
                    example: 1234
                  config:
                    type: object
  /assignment:
    get:
      tags:
        - Assignment
      summary: Get all assignments
      description: Get all assignments filtered by query parameters
      operationId: getAssignments
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            example: 1
        - name: perPage
          in: query
          description: Number of items per page (max 100)
          required: false
          schema:
            type: integer
            example: 25
        - name: advisorEmail
          in: query
          description: Filter by advisor email
          required: false
          schema:
            type: string
            example: "john.smith@example.com"
        - name: tenantId
          in: query
          description: Filter by tenant ID
          required: false
          schema:
            type: string
            example: 1234
        - name: status
          in: query
          description: Filter by status
          required: false
          schema:
            type: string
            example: "completed"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginationResponse'
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Assignment'

    post:
      tags:
        - Assignment
      summary: Assign content to a client
      description: Assign content to a client, this will create a new assignment and store the versions of the content so that the assignment is 'sticky'
      operationId: assignContent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                  example: 1234
                contentId:
                  type: string
                  example: final-salary
                tenantId:
                  type: string
                  example: 1234
                clientFirstName:
                  type: string
                  example: "Jane"
                clientLastName:
                  type: string
                  example: "Doe"
                clientEmail:
                  type: string
                  example: "jane.doe@example.com"
                advisorFirstName:
                  type: string
                  example: "John"
                advisorLastName:
                  type: string
                  example: "Smith"
                advisorEmail:
                  type: string
                  example: "john.smith@example.com"
              required:
                - clientId
                - contentId
                - tenantId
                - clientFirstName
                - clientLastName
                - clientEmail
                - advisorFirstName
                - advisorLastName
                - advisorEmail
                
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  assignmentId:
                    type: string
                    example: 1234
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error message"
                  errors:
                    type: array
                    items: 
                      type: object
                      properties:
                        field: 
                          type: string
                          example: "clientId"
                        message:
                          type: string
                          example: "Field is required"
  /assignment/{id}: 
    get:
      tags:
        - Assignment
      summary: Get assignment by ID
      description: Get assignment by ID
      operationId: getAssignmentById
      parameters:
        - name: id
          in: path
          description: ID of assignment to return
          required: true
          schema:
            type: string
            example: 1234
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Assignment not found"
  /assignment/{id}/player:
    get:
      tags:
        - Assignment
      summary: Get player configuration for assignment
      description: Get player configuration for assignment, this will is designed to be called/used by the player SDKs when loading the player. The config property will vary depending on the content type, see the Schema section for examples
      operationId: getPlayerConfig
      parameters:
        - name: id
          in: path
          description: ID of assignment to return player configuration for
          required: true
          schema:
            type: string
            example: 1234
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  assignmentId:
                    type: string
                    example: 1234
                  playerTerms:
                    type: object
                    properties:
                      id:
                        type: string
                        example: default
                      text:
                        type: string
                        example: "By continuing you agree to the terms and conditions"
                      version:
                        type: number
                        example: "1.1"
                  config:
                    type: object
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Assignment not found"
  /assignment/{id}/pdf:
    post: 
      tags:
        - Assignment
      summary: Generate PDF for assignment
      description: Generate PDF for assignment, this API call will return the URL to the generated PDF and the status of the generation. However there is no garentee that the PDF will be available straight away. A webhook will be used to notify the completion of the PDF.
      operationId: generatePdf
      parameters:
        - name: id
          in: path
          description: ID of assignment to generate PDF for
          required: true
          schema:
            type: string
            example: 1234
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                callbackURL:
                  type: string
                  example: "https://example.com/webhook"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  assignmentId:
                    type: string
                    example: 1234
                  pdfUrl:
                    type: string
                    example: "https://cdn.example.com/assignment/1234.pdf"
                  status:
                    type: string
                    example: "complete"
            
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  assignmentId:
                    type: string
                    example: 1234
                  pdfUrl:
                    type: string
                    example: "https://cdn.example.com/assignment/1234.pdf"
                  status:
                    type: string
                    example: "generating"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Assignment not found"
  /analytics:
    post:
      tags:
        - Analytics
      summary: Record analytics event
      description: Record analytics event
      operationId: recordAnalytics
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignmentId:
                  type: string
                  example: 1234
                event:
                  type: string
                  example: "view"
                data:
                  type: object
                contentItemId:
                  type: string
                  example: "27-1"
              required:
                - assignmentId
                - event
                - data
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  analyticsId:
                    type: string
                    example: 1234
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Validation error message"
                  errors:
                    type: array
                    items: 
                      type: object
                      properties:
                        field: 
                          type: string
                          example: "clientId"
                        message:
                          type: string
                          example: "Field is required"
  /client/{id}:
    get:
      tags:
        - Client
      summary: Get clients assigned content
      description: Get all assigned content for a client
      operationId: getClientContent
      parameters:
        - name: id
          in: path
          description: ID of client to return content for
          required: true
          schema:
            type: string
            example: 1234
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Client not found"

components:
  schemas:
    Assignment: 
      type: object
      properties:
        assignmentId:
          type: string
          example: 1234
        clientId:
          type: string
          example: 1234
        tenantId:
          type: string
          example: 1234
        clientFirstName:
          type: string
          example: "Jane"
        clientLastName:
          type: string
          example: "Doe"
        clientEmail:
          type: string
          example: ""
        advisorFirstName:
          type: string
          example: "John"
        advisorLastName:
          type: string
          example: "Smith"
        advisorEmail:
          type: string
          example: "john.smith@example.com"
        status:
          type: string
          example: "completed"
        progress:
          type: string
          example: 1-14
        assignedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
        content:
          type: object
          example: { "id": "final-salary", "type": "box-set", "title": "Final Salary" }
        meta:
          type: object
          properties:
            questions:
              type: number
              example: 5
            questionData:
              type: array
              items:
                type: object
                properties:
                  chapter:
                    type: number
                    example: 1
                  question:
                    type: string
                    example: Sorry can you explain more?

    Content:
      type: object
      properties:
        id:
          type: string
          example: final-salary
        type:
          type: string
          example: box-set
        title:
          type: string
          example: Final Salary
        description:
          type: string
          example: "Long description of the content"
        duration:
          type: number
          description: Duration in seconds
          example: 183
        tags:
          type: array
          items:
            type: string
          example: ["risk"]
      
    BoxsetConfig:
      description: Box set player configuration object returned by the player APIs
      type: object
      properties:
        boxsetId:
          type: string
          example: "1234"
        track:
          type: array
          items:
            $ref: '#/components/schemas/TrackItem'
        topic:
          type: object
          properties:
            defaultTrackImage:
              $ref: '#/components/schemas/File'
            features:
              type: object
              properties:
                responsivePlayer: 
                  type: boolean
                  example: true
                videoBackground: 
                  type: boolean
                  example: true
            gradientEnd:
              type: string
              example: "#000000"
            gradientStart:
              type: string
              example: "#FFFFFF"
            primaryColor:
              type: string
              example: "#FFFFFF"
            secondaryColor:
              type: string
              example: "#000000"
            topicImageUrl:
              $ref: '#/components/schemas/File'
            topicComplete:
              type: object
            trackItemComplete:
              type: object
            trackItemReplay:
              type: object
                

    VideoCanvasConfig:
      description: Video canvas player configuration object returned by the player APIs
      type: object
      properties:
        vcId:
          type: string
          example: "1234"

    File:
      type: object
      properties:
        contentType:
          type: string
          example: "image/png"
        url:
          type: string
          example: "https://cdn.example.com/image.png"

    TrackItem:
      type: object
      properties:
        id:
          type: string
          example: "video-31"
        type:
          type: string
          example: "video"
        content:
          type: object
          properties:
            videoId:
              type: number
              example: 31
            version:
              type: number
              example: 1
            title:
              type: string
              example: "Final Salary"
            duration:
              type: number
              example: 183
            humanDuration:
              type: string
              example: "5min 48sec"
            features:
              type: array
            contentModel:
              type: string
              example: "video"
            captionsSrc:
              type: string
              example: "https://cdn.example.com/captions.vtt"
            videoSrc:
              type: object
              properties:
                m3u8:
                  type: string
                  example: "https://cdn.example.com/video.m3u8"
                mp4:
                  type: string
                  example: "https://cdn.example.com/video.mp4"
                mpd:
                  type: string
                  example: "https://cdn.example.com/video.mpd"
        image:
          $ref: '#/components/schemas/File'
        progress:
          type: number
          example: 0
        trackdata-completed:
          type: boolean
          example: false
        trackdata-locked:
          type: boolean
          example: false
        trackdata-notice-closed:
          type: boolean
          example: false
        trackdata-skipped:
          type: boolean
          example: false

    PaginationParameters:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        perPage:
          type: integer
          example: 25
    PaginationResponse:
      type: object
      properties:
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        perPage:
          type: integer
          example: 25
    
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header